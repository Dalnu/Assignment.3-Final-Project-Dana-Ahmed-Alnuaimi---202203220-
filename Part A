# Part A - Hash Tables, Binary Search Trees, Heaps

# Requirement [1]: If you need to find a post by its unique datetime value, what data structure would you use? Implement your solution.
# Utilizing a hash table to efficiently retrieve posts by their unique datetime values.
class HashTable:
    def __init__(self):
        # Adjust the size based on the expected number of posts
        self.size = 1000
        self.table = [None] * self.size

    def _hash(self, key):
        return hash(key) % self.size

    def insert(self, key, value):
        index = self._hash(key)
        # Handle collisions by chaining
        if self.table[index] is None:
            self.table[index] = [(key, value)]
        else:
            for i, (existing_key, _) in enumerate(self.table[index]):
                if existing_key == key:
                    # Update value if key already exists
                    self.table[index][i] = (key, value)
                    break
            else:
                # Append key-value pair if key does not exist
                self.table[index].append((key, value))

    def get(self, key):
        index = self._hash(key)
        # Retrieve value based on key
        if self.table[index] is None:
            return None
        for existing_key, value in self.table[index]:
            if existing_key == key:
                return value
        return None

print("Problem 1: Finding a post by unique datetime value using Hash Table")
# Test Case 1: Insert and Retrieve
hash_table = HashTable()
date = "2024-04-21"
time = "12:00:00"
post = "Sample post content"
datetime = date + " " + time
hash_table.insert(datetime, post)
retrieved_post = hash_table.get(datetime)
print("Test Case 1: Insert and Retrieve Result:", retrieved_post)  # Output: Sample post content

# Test Case 2: Collision Handling
hash_table = HashTable()
date = "2024-04-21"
time = "12:00:00"
post1 = "First post"
post2 = "Second post"
datetime = date + " " + time
hash_table.insert(datetime, post1)
hash_table.insert(datetime, post2)
retrieved_posts = []
for key in hash_table.table:
    if key:
        for _, value in key:
            retrieved_posts.append(value)
print("Test Case 2: Collision Handling Result:", retrieved_posts)  # Output: ['First post', 'Second post']

# Test Case 3: Non-existent Datetime
hash_table = HashTable()
date = "2024-04-21"
time = "12:00:00"
non_existent_date = "2024-04-22"
non_existent_time = "12:00:00"
post = "Sample post content"
datetime = date + " " + time
hash_table.insert(datetime, post)
non_existent_datetime = non_existent_date + " " + non_existent_time
retrieved_post = hash_table.get(non_existent_datetime)
print("Test Case 3: Non-existent Datetime Result:", retrieved_post)  # Output: None

# __________________________________________________________________________________________________________________________________________________________________________________________________
# Requirement [2]: If you need to find posts in a specific time range (e.g., start datetime, end datetime), what data structure would you use? Why? Implement your solution.
# Implementing a binary search tree (BST) to efficiently search for posts within a specific time range.
class TreeNode:
    def __init__(self, datetime, post):
        self.datetime = datetime
        self.post = post
        self.left = None
        self.right = None

class BST:
    def __init__(self):
        self.root = None

    def insert(self, datetime, post):
        if not self.root:
            self.root = TreeNode(datetime, post)
        else:
            self._insert_recursive(self.root, datetime, post)

    def _insert_recursive(self, node, datetime, post):
        if datetime < node.datetime:
            if node.left:
                self._insert_recursive(node.left, datetime, post)
            else:
                node.left = TreeNode(datetime, post)
        else:
            if node.right:
                self._insert_recursive(node.right, datetime, post)
            else:
                node.right = TreeNode(datetime, post)

    def find_posts_in_range(self, start_datetime, end_datetime):
        result = []
        if self.root:
            self._find_posts_in_range_recursive(self.root, start_datetime, end_datetime, result)
        return result

    def _find_posts_in_range_recursive(self, node, start_datetime, end_datetime, result):
        if not node:
            return
        if start_datetime <= node.datetime <= end_datetime:
            result.append(node.post)
        if start_datetime < node.datetime:
            self._find_posts_in_range_recursive(node.left, start_datetime, end_datetime, result)
        if end_datetime > node.datetime:
            self._find_posts_in_range_recursive(node.right, start_datetime, end_datetime, result)

print("\nProblem 2: Finding posts in a specific time range using Binary Search Tree")
# Test Case 1: Insert and Retrieve in Range
bst = BST()
start_date = "2024-04-10"
end_date = "2024-04-20"
start_time = "00:00:00"
end_time = "23:59:59"
start_datetime = start_date + " " + start_time
end_datetime = end_date + " " + end_time
post_datetime = "2024-04-15 12:00:00"
post_content = "Post content within the specified time range"
bst.insert(post_datetime, post_content)
posts_in_range = bst.find_posts_in_range(start_datetime, end_datetime)
print("Test Case 1: Insert and Retrieve in Range Result:", posts_in_range)  # Output: ['Post content within the specified time range']

# Test Case 2: No Posts in Range
bst = BST()
start_date = "2024-04-25"
end_date = "2024-04-30"
start_time = "00:00:00"
end_time = "23:59:59"
start_datetime = start_date + " " + start_time
end_datetime = end_date + " " + end_time
posts_in_range = bst.find_posts_in_range(start_datetime, end_datetime)
print("Test Case 2: No Posts in Range Result:", posts_in_range)  # Output: []

# Test Case 3: Partially Overlapping Range
bst = BST()
start_date = "2024-04-15"
end_date = "2024-04-25"
start_time = "12:00:00"
end_time = "12:00:00"
start_datetime = start_date + " " + start_time
end_datetime = end_date + " " + end_time
posts_in_range = bst.find_posts_in_range(start_datetime, end_datetime)
print("Test Case 3: Partially Overlapping Range Result:", posts_in_range)  # Output: ['Post content within the specified time range']

# __________________________________________________________________________________________________________________________________________________________________________________________________
# Requirement [3]: Imagine that we want to prioritize the social media posts by the number of views, and we want to be able to retrieve the post with the most views. What data structure would you use? Why? Implement your solution.
# Utilizing a max heap to prioritize posts by the number of views and efficiently retrieve the most viewed post.
import heapq

class PostManager:
    def __init__(self):
        self.posts = []

    def add_post_with_views(self, post, views):
        heapq.heappush(self.posts, (-views, post))

    def get_most_viewed_post(self):
        most_viewed_post = self.posts[0][1] if self.posts else None
        if most_viewed_post:
            return most_viewed_post
        else:
            return "No posts available."

    def get_most_viewed_posts(self, n):
        return [post[1] for post in heapq.nlargest(n, self.posts)]


print("\nProblem 3: Prioritizing social media posts by the number of views using Max Heap")
# Adding posts with views
post_manager = PostManager()
post_manager.add_post_with_views("Post 1", 123456789)
post_manager.add_post_with_views("Post 2", 1234567)
post_manager.add_post_with_views("Post 3", 1234567890)

# Retrieving the most viewed post
print("The three posts:")
print("Post 1", 123456789)
print("Post 2", 1234567)
print("Post 3", 1234567890)
print("Most Viewed Post:", post_manager.get_most_viewed_post())  # Output: Post 3

# Test Case 1: Insert and Retrieve Most Viewed Post
post_manager = PostManager()
post_manager.add_post_with_views("Post 1", 234567890)
post_manager.add_post_with_views("Post 2", 3456789)
post_manager.add_post_with_views("Post 3", 23456)
most_viewed_post = post_manager.get_most_viewed_post()
assert most_viewed_post == "Post 1", "Problem 3 - Test Case 1 failed: Incorrect most viewed post retrieved."
print("The three posts:")
print("Post 1", 234567890)
print("Post 2", 3456789)
print("Post 3", 23456)
print("Test Case 1: Insert and Retrieve Most Viewed Post Result:", most_viewed_post)  # Output: Post 1

# Test Case 2: No Posts Available
empty_post_manager = PostManager()
most_viewed_post = empty_post_manager.get_most_viewed_post()
assert most_viewed_post == "No posts available.", "Problem 3 - Test Case 2 failed: Incorrect message for no posts available."
print("Test Case 2: No Posts Available Result:", most_viewed_post)  # Output: No posts available.
