# If you need to find a post by its unique datetime value, what data structure would you use? Implement your solution.
class HashTable:
    def __init__(self):
        self.size = 1000  # Adjust the size based on the expected number of posts
        self.table = [None] * self.size

    def _hash(self, key):
        return hash(key) % self.size

    def insert(self, key, value):
        index = self._hash(key)
        if self.table[index] is None:
            self.table[index] = [(key, value)]
        else:
            for i, (existing_key, _) in enumerate(self.table[index]):
                if existing_key == key:
                    self.table[index][i] = (key, value)
                    break
            else:
                self.table[index].append((key, value))

    def get(self, key):
        index = self._hash(key)
        if self.table[index] is None:
            return None
        for existing_key, value in self.table[index]:
            if existing_key == key:
                return value
        return None


# If you need to find posts in a specific time range (e.g., start datetime, end datetime), what data structure would you use? Why? Implement your solution.
class TreeNode:
    def __init__(self, datetime, post):
        self.datetime = datetime
        self.post = post
        self.left = None
        self.right = None

class BST:
    def __init__(self):
        self.root = None

    def insert(self, datetime, post):
        if not self.root:
            self.root = TreeNode(datetime, post)
        else:
            self._insert_recursive(self.root, datetime, post)

    def _insert_recursive(self, node, datetime, post):
        if datetime < node.datetime:
            if node.left:
                self._insert_recursive(node.left, datetime, post)
            else:
                node.left = TreeNode(datetime, post)
        else:
            if node.right:
                self._insert_recursive(node.right, datetime, post)
            else:
                node.right = TreeNode(datetime, post)

    def find_posts_in_range(self, start_datetime, end_datetime):
        result = []
        if self.root:
            self._find_posts_in_range_recursive(self.root, start_datetime, end_datetime, result)
        return result

    def _find_posts_in_range_recursive(self, node, start_datetime, end_datetime, result):
        if not node:
            return
        if start_datetime <= node.datetime <= end_datetime:
            result.append(node.post)
        if start_datetime < node.datetime:
            self._find_posts_in_range_recursive(node.left, start_datetime, end_datetime, result)
        if end_datetime > node.datetime:
            self._find_posts_in_range_recursive(node.right, start_datetime, end_datetime, result)
